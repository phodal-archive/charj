name: Charj Build

on: [push]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.name }}

    strategy:
      matrix:
        name: [
            macos-latest,
            ubuntu-latest,
            windows-2019-clang
        ]

        include:
          - name: macos-latest
            INSTALL_LLVM: brew install llvm
            ENV_VARS: LLVM_SYS_100_PREFIX="/usr/local/opt/llvm"

          - name: ubuntu-latest
            INSTALL_LLVM: wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && sudo ./llvm.sh 10
            ENV_VARS: ~

          - name: windows-2019-clang
            cmake_build_type: Release
            os: windows-2019
            compiler: clang-cl

    steps:
      - uses: actions/checkout@v2
      - name: Checkout submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      - name: Install (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
          scoop install ninja llvm --global
          vcpkg install curl:x64-Windows
          if ("${{ matrix.compiler }}" -eq "clang") {
            echo "::set-env name=CC::clang"
            echo "::set-env name=CXX::clang++"
          } else {
            echo "::set-env name=CC::${{ matrix.compiler }}"
            echo "::set-env name=CXX::${{ matrix.compiler }}"
          }
          & .github\workflows\vsenv.bat -arch=x64 -host_arch=x64

      - name: Install LLVM
        run: ${{matrix.INSTALL_LLVM}}
      - name: Get rust nightly
        run: rustup install nightly
      - name: Set rust nightly as default for cargo
        run: rustup default nightly
      - name: Build
        run: ${{matrix.ENV_VARS}} cargo build --verbose --release
      - name: Run tests
        run: ${{matrix.ENV_VARS}} cargo test --verbose --all
